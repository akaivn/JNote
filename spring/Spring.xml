spring
​   spring的优点
        1.降低对象与对象之间的耦合关系（解耦）
        2.轻量级的 java语言编写的，ioc，aop
    单例和多例
        单例
            在解析配置文件完成之后立刻创建对象
            只会创建一次对象，spring会把它存入容器中，以后使用的都是同一个对象
            执行效率高
        多例
            什么时候需要对象什么时候创建
            会创建多个对象
            因为每次都会创建新的对象，执行效率不高
​	创建bean对象的三钟方式
        1.采用无参构造函数创建bean对象
            <bean id = "crateBean" class = "cn.kate.xxx.xxx"></bean>
        2.使用的某个类里的方法来创建对象
            <bean id = "createBeanTwo" class = "某个类"/>
            <bean id = "useBean" factory-bean = "createBeanTwo" factory-method = "某个方法"/>
        3.使用的某个类里的静态方法来创建对象
            <bean id = "createBeanTwo" class = "某个类" factory-method = "某个方法"/>
​    bean的作用域
        singleton 单例
        prototype 原型(多例)（每次getBean都会创建一个新的对象）
        request 每次请求都会创建一个新的对象
        session	当前会话下的对象
        globel session 集群环境下的全局会话
        applicatioin  全局下的变量
        配置：
            <bean id="user" class="cn.kate.entity.User" scope="xxx"></bean>
​    bean对象的生命周期
        ​单例对象（singleton）
            ​出生:当容器创建时对象出生
            ​活着:只要容器还在，对象一直活着
            ​总结:单例对象的生命周期和容器相同
        ​多例对象(prototype)
            ​出生:当我们使用对象时spring框架为我们创建
            ​活着:对象只要是在使用过程中就一直活着
            ​死亡|当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
    spring的核心对象
        ApplicationContext
        ClassPathXmlApplicationContext
            使用xml配置时使用以上两个
        AnnotationConfigApplicationContext：使用注解时使用它

    ioc--Inversion of Control（控制反转)
        控制：指谁来控制对象的创建，传统的应用程序对象是由程序自己创建的，使用spring后由spring创建
        反转：程序本身不去创建对象，而变为被动的接受对象
        总结：程序本身不创建对象，由spring创建对象后使程序被动的接受对象

    IOC和DI的区别
        1.它们是spring核心思想的不同方面的描述。

        2.依赖注入和控制反转是对同一件事情的不同描述，从某个方面讲，就是它们描述的角度不同。

        依赖注入是从应用程序的角度在描述，可以把依赖注入描述完整点：应用程序依赖容器创建并注入它所需要的外部资源；

        而控制反转是从容器的角度在描述，描述完整点：容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源。

    依赖注入：DI--Dependency injection
        依赖：bean对象对容器的依赖，bean对象对资源的依赖
        注入：spring容器对创建的bean对象进行设置和装配
        spring对bean对象的注入一共有三类和三种方式
            哪三类
                普通变量注入
                spring容器的bean（对象）注入
                集合注入
            那三种方式
                set方法注入 
                    优势:
                        创建对象时没有明确的限制，可以直接使用默认构造函数
                    弊端:
                        如果有某个成员必须有值，则获取对象时 可能set方法无法保证一定注入
                构造器注入
                    优势:
                        在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
                    弊端:
                        改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供
                注解注入
                    1.用于创建对象的
                        和在XML配置文件中编写一个<bean>标签实现的功能是一样的
                        @Component
                            它的作用是创建对象，后面有一个参数为bean的id，默认不写的话id就是类名的首字母小写，写了就照写了的来
                        @Controller：用在控制层
                        @Service：用在业务层
                        @Repository：用在持久层
                            它们的作用和@Component一样，只不过是spring为了mvc分层设计的能见名知意的注解

                    2.用于注入数据的
                        和xml配置文件中的bean标签中写一个<property>标签的作用是一样的
                        @Autowired（不写@Qualifier是根据类型注入）
                            用于自动的根据类型来装配，不需要set方法，一般用在成员属性上和方法上
                            注意：spring容器中必须有需要自动装配的对象且唯一拥有，不然没法用，如果没有唯一的话报错，如果多了就会在按照方法名来再次排查看时候有bean的id跟方法名一致就装配它
                            例：
                                @Autowired
                                private Address address;
                        @Qualifier（再根据类型注入的基础上去根据名称注入）
                            当spring容器中有多个某一类型的对象又没有一个对象的id跟它的方法名一致时上述注解无法完成注入,此时可以使用该注解
                            该注解的值的属性是value，value后跟bean对象的id，该注解只能跟@Autowired一起使用
                            例：
                                @Autowired
                                @Qualifier("childe")
                                private Address address;
                        @Resource(name | type)                    
                            上述两个注解能完成，该注解一个就可以完成，值的属性为name，name后跟bean对象的id
                            默认不写按照name装配，找不到就按照type注入，如果没有type，编译报错
                        @Primary
                            在同类中优先被选择（当有两个同类时，@Resource和@Autowired就会报错，此时就可以使用该注解，该注解作用在需要被注入的类上）
                        以上注解都只能完成对象类型的注入，基本类型和String类型无法使用,集合类型只能在xml配置文件中完成
                        @Value()
                            该注解用于来注入基本数据类型和String数据类型，该注解值属性为value，value后跟要注入的值（支持springEL表达式）语法：(${表达式})
                            例：
                                @Value("1")
                                private int id;

                    3.用于改变作用范围的
                        和bean标签中使用scope属性实现的功能是一样的
                        @Scope
                            取值为singleton和prototype默认单例

                    4.和生命周期相关（了解）
                        和在bean标签中使用init-method 和 destroy-method 一样
                        @PreDestroy == init-method
                        @PostConstruct == destroy-method
                    5.
                        @Configuration：指定当前类是一个配置类
                        @ComponentScan： 用于通过注解指定spring在创建容器时要扫描的包
                        @Bean：将方法的返回值存入spring容器中，属性为name 默认值为方法的名字首字母小写，值的意思代表bean对象的id也就是ioc容器里存bean对象的key
                            细节：如果你在方法生上了该注解，那么他就会去spring容器中通过@Autowired注解一样的功能去寻找相同类型的对象，如果没有会报错，如果多了就一样按照autowired的方法去找唯一一个

                        @Import:导入其它的配置类，属性：value[]后跟某个类的class类型

                        @PropetySource：声明需要读取的配置文件(xxx.properties)
                            例：读取jdbc的properties配置文件
                                配置：
                                    @PropertySource("classpath:jdbc.properties")
                                    public class SpringConfiguration {

                                    }
                                读取：
                                    @Value("${jdbc.url}")
                                    private String url;
                                    @Value("${jdbc.driver}")
                                    private String driver;
                                    @Value("${jdbc.username}")
                                    private String username;
                                    @Value("${jdbc.password}")
                                    private String password;
                                    注：此时@Value注解使用的时SpEl表达式，读取的时被@PropertySource注解指定的jdbc.properties配置文件
                1.常量注入
                    <bean id = "user" class = "cn.kate.entity.User">
                    	<property name="name" value = "王五"></property>
                    </bean>
                2.对象注入（基于setter ref）
                    <bean id = "address" class = "cn.kate.entity.Address" p:address = "测试"/>
                    <bean id = "user" class = "cn.kate.entity.User">
                    	<property name="add" ref="address"></property>
                    </bean>
                3.构造器注入
                    ref:引入注入
                        <bean id="address" class = "cn.kate.entity.Address" c:address = "开封"></bean>
                        <constructor-arg name="add" ref="address"/>
                    name：根据参数名注入
                        <constructor-arg name="name" value = "测试"/>
                        <constructor-arg name="age" value = "12"/>
                    index：根据参数下标注入
                        <constructor-arg index="0" value = "测试"/>
                        <constructor-arg index="1" value = "12"/>
                    type：根据参数类型注入
                        <constructor-arg type = 'java.lang.String' value = "测试"/>
                        <constructor-arg type = "int" value = "12"/>
                        <constructor-arg type = "cn.kate.entity.Address" ref="address"/>
                List注入
                    <property name="hobbies">
                        <list>
                            <!--简单list集合类型注入-->
                            <value>唱歌</value>
                            <value>有序可重复</value>
                            <!--注册泛型为对象类型-->
                            <ref bean="address"/>
                            <bean id="address3" class="cn.kate.entity.Address" p:aid="3" p:addressCity="henan"/>
                            <!--下面多的一,不写了，集合里面可以放到可多，有map，set，数组，对象，常量等等等等，举两个例子就行了，其他的大同小异-->
                        </list>
                    </property>
                set注入
                    <property name="sis">
                        <set>
                            <value>有序不可重复</value>
                        </set>
                    </property>
                数组注入
                    <array>
                        <!--简单数组注入-->
                        <value>红楼</value>
                        <value>仲夏夜之梦</value>
                        <value>迷雾</value>
                    </array>
                map注入
                    <map>  
                        <entry>
                            <key><value>13383738211</value></key>
                            <value>1654616541845444646</value>
                        </entry>
                    </map>
                p命名空间注入
                    引入头文件
                        xmlns:p="http://www.springframework.org/schema/p"
                        <bean id="user" class="cn.kate.entity.User" p:name="xxx" p:age="15"/>
                Properties(java.util)注入
                    <props>
                        <prop key="学号">201830290214</prop>
                        <prop key="性别">0</prop>
                    </props>
                null注入和空字符串注入
                    <bean class="ExampleBean">
                        <property name="email">
                            <null/>
                        </property>
                    </bean>
                    <bean class = "test"><property name = "test" value = ""></property></bean>
                c命名空间注入(必须拥有相应的构造器)
                    引入头文件
            			xmlns:c="http://www.springframework.org/schema/c"
            			<bean id="user" class="cn.kate.entity.User" c:name="测试" c:age="45"/>
                导入其他的xml配置文件
		          <import resource="xxx.xml"/>

    配置id和name的区别
        1.如果不配置id不配置name，spring容器会使用类全名来作为唯一标识符
        2.如果配置id不配置name，id是唯一标识符，且在整个spring配置中必须唯一
        3.如果配置name不配置id，name是唯一标识符，且在整个spring配置中必须唯一
        4.如果配置了id又配置name，id是唯一标识符，name是别名
        5.如果配置了很多name，没有id，name的第一个将会被作为唯一标识符，其他的name将会被作为别名
        6.如果同时配置了id和name，且名字相同时，spring容器会消除冲突，这个bean只会有标识符，而没有别名
        注意：name里的参数之间可以使用 逗号，空格，分号等隔开

    spring整合junit
        问题的引出：
            junit单元测试中，为了省略大量的繁杂的重复的代码以及考虑测试的问题，可以将@Autowired注解应用到单元测试中，但junit并没有集成spring，不知道spring的注解，当然也就不会创建核心容器，那么此时就需要我们将spring和junit进行整合
        整合思路：
            1.导入spring整合junit的jar或者maven坐标
            2.将junit中集成的main方法替换成spring提供的（这样就可以去加载和识别spring框架中的配置）
            3.将xml配置文件，或注解配置类的位置告知给junit

        实现：
            1.导入jar包：spring-test
            2.使用@RunWith(SpringJUnit4ClassRunner.class)注解替换main方法
            3.使用@ContextConfiguration()注解来声明配置文件的位置
                属性：
                    location：用来指定xml配置文件的位置，可以和classpath关键字一起用
                    classes：用来指定注解配置类的位置
        注：spring5.x需要junit4.12及以上jar的支持
    事务控制分析
        必须由一个Connection来控制事务的提交和回滚
        创建一个自定义类使用ThreadLocal<Connection>来使当前线程和connection绑定
        创建一个事务控制类来调用此时线程中唯一的connection的事务方法
        由业务层拥有此事务控制类后调用此类中的事务方法即可

        弊端：大量的重复的代码，冗余，结构复杂，依赖关系复杂，注入复杂，配置复杂
    动态代理分析：
        动态代理:
            特点:字节码随用随创建，随用随加载
            作用:不修改源码的基础上对方法增强
            分类:
                基于接口的动态代理
                基于子类的动态代理 cglib
            基于接口的动态代理;
                涉及的类: Proxy 
                提供者: JDK官方
            如何创建代理对象:
                使用Proxy类中的newProxyInstance方法
            创建代理对象的要求:
                被代理类最少实现一个接口，如果没有则不能使用
                newProxyInstance方法的参数:
                    ClassLoader:类加载器
                        它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。
                    Class[]:字节码数组
                        它是用于让代理对象和被代理对象有相同方法。固定写法。
                    InvocationHandler:用于提供增强的代码
                        它是让我们写如何代理。我们一般都是写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。
                        此接口的实现类都是谁用谁写。
    spring Aop
        Aop(Aspect Oriented Programming):面向切面编程
            什么是aop：本质上是动态代理，通过spring容器实现配置来完成动态代理的功能，最大程度实现组件重用和对象解耦的功能以及对方法的增强
        关于aop的术语
            目标对象（target）原始对象，被代理对象，真实角色，也就是核心业务逻辑的类

            切入点(pointcut) 是原始对象中需要增强（在核心业务逻辑基础上追加非核心业务逻辑）的函数

            连接点 (joinpoint) 切点是确定到函数，那最终非核心业务逻辑执行在函数之前还是之后的位置，只的就是连接点。前置，后置，环绕...

            切面 （aspect）  切点+连接点

            通知 (advice) 也叫增强，也就是非核心业务逻辑提取的类就是通知类或者增强类

            织入（wave） 将增强代码插入到切面执行的动作叫做织入
            
            总结：面向切面编程就是在运行过程中动态的将某些通知插入到目标对象的切入点的连接点上进行执行。这个过程就叫织入
        切入点表达式在开发中的写法
            通常指定到业务层下的所有方法
                * com.aaa.service.impl.*.*(..)
        常用的四种通知类性及配置
            <!--前置通知 :在业务方法执行之前执行-->
            <aop:before method="beforeLog" pointcut="execution(* com.ccc.dao.impl.*.*(..))"></aop:before>
            <!--后置通知 :在业务方法正常执行之后执行，它和异常通知永远都只可能同时执行一个-->
            <aop:after-returning method="afterReturningLog" pointcut="execution(* com.ccc.dao.impl.*.*(..))"></aop:after-returning> 
            <!--异常通知 :在业务方法执行抛出异常后执行，它和后置通知永远都只可能同时执行一个-->
            <aop:after-throwing method="afterThrowingLog" pointcut="execution(* com.ccc.dao.impl.*.*(..))"></aop:after-throwing>
            <!--最终通知 :在业务方法后执行，无论业务方法是否正常执行完它都会在最后执行-->
            <aop:after method="afterLog" pointcut="execution(* com.ccc.dao.impl.*.*(..))"></aop:after>
        环绕通知
            spring中为我们提供了两种声明通知类型的方式，第一种是通过配置，第二种是通过代码也就是环绕通知的方式
            作用：可以通过编码的方式来手动的完成通知方式的配置
                配置如下
                    public Object afterAround(ProceedingJoinPoint pjp) {
                        Object obj = null;
                        try {
                            Object[] args = pjp.getArgs();
                            System.out.println("afterAround执行...前置通知");

                            obj = pjp.proceed(args);

                            System.out.println("afterAround执行...后置");
                        } catch (Throwable throwable) {
                            System.out.println("afterAround执行...异常");
                            throwable.printStackTrace();
                        }finally {
                            System.out.println("afterAround执行...最终");
                        }
                        return obj;
                    }

            代码解析：
                ProceedingJoinPoint对象是spring给我们提供的，由spring在程序创建时给我们加载该接口的实例对象
                proceed(args)   就是对业务层方法明确的调用
                getArgs();  获得方法运行时的参数
                注意：执行环绕通知抛出的异常为throwable，如果使用Exception将无法捕获该异常
        使用aop实现动态代理的几种实现方式
            1.aopApi实现配置(advisor基于目标对象)
                <bean id="log" class = "cn.kate.log.Log"/>
                <aop:config>
                    <!-- 切入点 -->
                    <!-- expression(具体的切入配置) -->
                    <aop:pointcut expression="execution(* cn.kate.service.impl.*.*(..))" id="pointcut"/>
                    <!-- 连接在一起 -->
                    <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
                </aop:config>

                注：增强类必须实现相对应的连接点类型
                    MethodBeforeAdvice before方法代表前置通知
                    AfterReturningAdvice afterReturn方法代表后置通知
                    MethodInterceptor：环绕通知的类
                    ThrowsAdvice：异常通知的类

            2.自定义实现配置(aspect基于增强(通知)类)
                <bean id="svi" class="cn.kate.service.impl.ServiceImpl"/>
                <bean id="log" class = "cn.kate.log.Log"/>
                <aop:config>
                    <aop:aspect ref="log">
                        <aop:pointcut expression="execution( * cn.kate.service.impl.*.*(..))" id="pointer"/>
                        <aop:before method="before" pointcut-ref="pointer"/>
                        <aop:after method="after" pointcut-ref="pointer"/>
                    </aop:aspect>
                </aop:config>

            3.注解实现配置
                @Aspect<!--声明切面-->
                <!--启用支持注解配置aop--><aop:aspectj-autoproxy/> 纯注解使用@EnableAspectjAutoProxy

                @Pointcut("execution( * com.ccc.dao.impl.*.*(..))")
                public void pt(){};

                //前置通知
                @Before("pt()")
                public void beforeLog(){
                    System.out.println("beforeLog...");
                }
                //后置通知
                @AfterReturning("pt()")
                public void afterReturningLog(){
                    System.out.println("afterReturningLog...");
                }
                //异常通知
                @AfterThrowing("pt()")
                public void afterThrowingLog(){
                    System.out.println("afterThrowingLog...");
                }
                //最终通知
                @After("pt()")
                public void afterLog(){
                    System.out.println("afterLog...");
                }
            注意：当使用注解来做springaop声明式事务控制时，它会先走最终通知，再走后置通知，此时当前线程上的链接已经被回收，新创建的链接事务是未开启状态，如果此时非要用注解来配置，那你可以使用环绕通知
                @Around("pt()")
                public Object afterAround(ProceedingJoinPoint pjp) {
                    Object obj = null;
                    try {
                        Object[] args = pjp.getArgs();
                        System.out.println("afterAround执行...前置通知");

                        obj = pjp.proceed(args);

                        System.out.println("afterAround执行...后置");
                    } catch (Throwable throwable) {
                        System.out.println("afterAround执行...异常");
                        throwable.printStackTrace();
                    }finally {
                        System.out.println("afterAround执行...最终");
                    }
                    return obj;
                }

    基于SpringAop实现声明式事务控制
        xml
            <!--
                前提：dao必须继承JdbcDaoSupport,或者持有一个JdbcTemplate对象时才能使用。必须使用它(JdbcTemplate)提供的增删改查方法
                1.配置事务管理器
                2.配置事务通知
                3.配置切入点表达式
                4.配置切入点表达式与事务通知的链接
                5.配置事务通知的属性
                    isolation：表示事务 的隔离级别，默认值为DEFAULT，表示采用数据库的默认隔离级别 repeatable read 
                    propogation：表示事务的传播，默认值为REQUIRE，表示最终都会有事务，增删改时使用，查询可用SUPPORTS
                    rade-only：表示事务是否为只读，默认值为false，只有查询方法为只读，增删改为读写
                    timeout：表示实物的超时时间，默认值为-1，表示永不超时，如果设置，单位为秒
                    rollback-for：设定一个异常，如果发生该异常，事务回滚，发生其他异常，事务不回滚，没有默认值，表示事务回滚
                    no-rollback-for：设定一个异常，如果发生该异常，事务不回滚，发生其他异常，事务回滚，没有默认值，表示事务回滚
            -->
            <!--配置事务管理器-->
            <bean id = "transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                <!--配置数据源-->
                <property name="dataSource" ref="dataSource"/>
            </bean>
            <!--事务通知-->
            <tx:advice id="txAdvice" transaction-manager="transactionManager">
                <!--配置通知属性-->
                <tx:attributes>
                                <!--我们业务层的方法名称-->
                    <tx:method name="*" propagation="REQUIRED" read-only="false"/>
                    <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
                </tx:attributes>
            </tx:advice>
            <!--切入点表达式-->
            <aop:config>
                <!--配置切入点表达式-->
                <aop:pointcut id="pt" expression="execution(* com.aaa.service.impl.*.*(..))"/>
                <!--建立切入点表达式与事务通知的联系-->
                <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"/>
            </aop:config>
        注解
            <!--
                1.配置事务管理器
                2.开启spring对注解事务的支持
                3.在需要使用事务的类上加上@Transactionl注解
            -->
            <!--配置事务管理器-->
            <bean id = "transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                <!--配置数据源-->
                <property name="dataSource" ref="dataSource"/>
            </bean>

            开启spring对注解事务的支持
            <tx:annotation-driven transaction-manager="transactionManager"/>
            例：
                @Transactionl("此处写事务的属性")
                public interface AccountServiceImpl {}
        纯注解
            @EnableTransactionManagement    :开启spring对事务的支持
    Spring JDBCTemplate
        What
            Spring为我们提供了一个关于jdbc操作的封装也就是JDBCTemplate模板语言，它和DButils一样都是堆jdbc操作进行了浅层的封装，与此同时它和DButils的语法也很像，当然既然属于spring就一定能和spring进行无缝集成
        需要导入spring-jdbc和spring-tx 
        JDBCTemplate的简单操作

            //1.创建数据源,spring内置数据源
            DriverManagerDataSource ds = new DriverManagerDataSource();
            //2.设置数据源属性
            ds.setDriverClassName("oracle.jdbc.OracleDriver");
            ds.setUrl("jdbc:oracle:thin:@localhost:1521:orcl");
            ds.setUsername("scott");
            ds.setPassword("kate");
            //3.创建jdbcTemplate对象,将数据源作为参数传递给jt对象
            JdbcTemplate jt = new JdbcTemplate(ds);
            jt.execute("insert into tb_user values (sq_tbuser.nextval,'test','jdbctemplate') ");

        上述的使用，很多都是spring可以封装起来装配给我们的，因此，我们还可以使用spring的配置来完成相关操作
        使用jdbcTmplate实现数据库CURD操作
            1.insert
                jdbcTemplate.update("insert into tb_user values (sq_tbuser.nextval,?,?)","test3","insert + jdbcTemplate");
            2.update
                jdbcTemplate.update("update tb_user set name = ?,password = ? where id = ?","xiaozi","xiaozi521",61);
            3.delete
                jdbcTemplate.update("delete from tb_user where id = ?",64);
            4.select all
                List<User> all = jdbcTemplate.query("select * from tb_user", new BeanPropertyRowMapper<User>(User.class));
                for (User user : all) {
                    System.out.println(user);
                }
            5.selete one
                List<User> all = jdbcTemplate.query("select * from tb_user where id = ?", new BeanPropertyRowMapper<User>(User.class),63);
                System.out.println(all.isEmpty()?"是空的":all.get(0));
            6.聚合 count
                Integer integer = jdbcTemplate.queryForObject("select count(1) from tb_user", Integer.class);
                System.out.println(integer);
            用法跟Dbutils差不多，DButils封装到了beanlisthandler和beanHandler中，而spring是通过不同的query方法来完成功能，这里也是没有对事务进行控制，采用的是自动提交(commit)

    spring5新特性
        1.集成commons-loggingjar为jcl
        2.支持JDK1.8版本，运行更快。对JDK 9运行时兼容性（以前的JDK和Java EE版本不再受支持了）
        3.支持kotlin语言
        4.响应式编程

    Extened
    	BeanFactory与FactoryBean的区别
    		BeanFactory是ioc容器实现的标准，里面定义了ioc容器如何管理和装配bean，当我们把bean配置到ioc容器中去时，spring给我们将bean实例化，进行一系列注入等，我们都是看不到的，而FactoryBean是spring提供给我们让我们来实例化bean时做一些额外的业务逻辑处理，这些逻辑是可视化的，前提是你的类必须交给spring来管理(配置到ioc容器中去)。
    	FactoryBean与普通bean的区别
    		普通bean
    			调用getBean方法时，调用的其实是spring容器给你创建的bean实例
    		FactoryBean
    			当getBean时，你调用的其实是FactoryBean的getObject()方法，而不是FactoryBean本身，如果你想要调用的是它本身，那你就在getBean(beanName)beanName前加一个&
    ssm整合
        思路：
            导入所有jar包
            spring的配置文件和springmvc的写在一起,springmvc配置文件配置监听，使服务器初始化时将spring配置读取到程序中
            spring配置文件中加入mybatis配置 

        <project>5.2.1.RELEASE</project>

        <dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <version>4.12</version>
	      <scope>test</scope>
	    </dependency>

	    <dependency>
	      <groupId>log4j</groupId>
	      <artifactId>log4j</artifactId>
	      <version>1.2.17</version>
	    </dependency>

	    <!--mybatis-->
	    <dependency>
	      <groupId>org.mybatis</groupId>
	      <artifactId>mybatis</artifactId>
	      <version>3.4.5</version>
	    </dependency>

	    <dependency>
	      <groupId>org.mybatis</groupId>
	      <artifactId>mybatis-spring</artifactId>
	      <version>1.3.2</version>
	    </dependency>

	    <dependency>
	      <groupId>org.aspectj</groupId>
	      <artifactId>aspectjweaver</artifactId>
	      <version>1.8.5</version>
	    </dependency>

	    <dependency>
	      <groupId>org.projectlombok</groupId>
	      <artifactId>lombok</artifactId>
	      <version>1.16.18</version>
	    </dependency>

	    <dependency>
	      <groupId>c3p0</groupId>
	      <artifactId>c3p0</artifactId>
	      <version>0.9.1.2</version>
	    </dependency>

	    <dependency>
	      <groupId>mysql</groupId>
	      <artifactId>mysql-connector-java</artifactId>
	      <version>8.0.15</version>
	    </dependency>

	    <!--jackson-->
	    <dependency>
	      <groupId>com.fasterxml.jackson.core</groupId>
	      <artifactId>jackson-databind</artifactId>
	      <version>2.9.9</version>
	    </dependency>

	    <!--spring+redis-->
	    <dependency>
	      <groupId>org.springframework.data</groupId>
	      <artifactId>spring-data-redis</artifactId>
	      <version>2.2.2.RELEASE</version>
	    </dependency>

	    <!--spring-->
	    <dependency>
	      <groupId>org.springframework</groupId>
	      <artifactId>spring-web</artifactId>
	      <version>${spring}</version>
	    </dependency>

	    <dependency>
	      <groupId>org.springframework</groupId>
	      <artifactId>spring-webmvc</artifactId>
	      <version>${spring}</version>
	    </dependency>

	    <dependency>
	      <groupId>org.springframework</groupId>
	      <artifactId>spring-jdbc</artifactId>
	      <version>${spring}</version>
	    </dependency>

	    <!--fastjson-->
	    <dependency>
	      <groupId>com.alibaba</groupId>
	      <artifactId>fastjson</artifactId>
	      <version>1.2.62</version>
	    </dependency>

	    <!--jstl-->
	    <dependency>
	      <groupId>javax.servlet</groupId>
	      <artifactId>jstl</artifactId>
	      <version>1.2</version>
	    </dependency>

	    <dependency>
	      <groupId>taglibs</groupId>
	      <artifactId>standard</artifactId>
	      <version>1.1.2</version>
	    </dependency>

	    <!--jsr303-->
	    <dependency>
		  <groupId>javax.validation</groupId>
		  <artifactId>validation-api</artifactId>
		  <version>1.1.0.Final</version>
		</dependency>

		<dependency>
		  <groupId>org.hibernate</groupId>
		  <artifactId>hibernate-validator</artifactId>
		  <version>6.1.0.Final</version>
		</dependency>